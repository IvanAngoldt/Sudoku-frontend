import { useState, useEffect } from "react";
import './AdminStyles.css';

const TournamentManagement = () => {
  const [tournamentsLoading, setTournamentsLoading] = useState(true);
  const [tournaments, setTournaments] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const token = localStorage.getItem('token');

  const [formData, setFormData] = useState({
    name: '',
    description: '',
    start_time: '',
    end_time: ''
  });

  const fetchTournaments = async () => {
    setTournamentsLoading(true);
    try {
      const res = await fetch('http://localhost:8080/tournaments/', {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏');
      }

      if (Array.isArray(data)) {
        setTournaments(data);
      } else {
        setTournaments([]);
      }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤:', err.message);
      setTournaments([]);
    } finally {
      setTournamentsLoading(false);
    }
  };

  const handleCreate = async () => {
    try {
      const res = await fetch('http://localhost:8080/tournaments/', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          ...formData,
          start_time: new Date(formData.start_time).toISOString(),
          end_time: new Date(formData.end_time).toISOString()
        })
      });

      const data = await res.json();

      if (!res.ok) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—É—Ä–Ω–∏—Ä–∞');
      }

      setShowModal(false);
      setFormData({ name: '', description: '', start_time: '', end_time: '' });
      fetchTournaments();
    } catch (err) {
      alert(err.message);
    }
  };

  const handleStartTournament = async (id) => {
    try {
      const res = await fetch(`http://localhost:8080/tournaments/${id}/start`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
      });
  
      const data = await res.json();
  
      if (!res.ok) {
        const message = data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä';
        alert(message);
        return;
      }
  
      alert('–¢—É—Ä–Ω–∏—Ä –∑–∞–ø—É—â–µ–Ω');
      fetchTournaments();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞: ' + err.message);
    }
  };
  
  
  const handleFinishTournament = async (id) => {
    try {
      const res = await fetch(`http://localhost:8080/tournaments/${id}/finish`, {
        method: 'POST',
        headers: { Authorization: `Bearer ${token}` },
      });
  
      if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä');
      fetchTournaments();
      alert('–¢—É—Ä–Ω–∏—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
    } catch (err) {
      alert(err.message);
    }
  };
  
  const handleDeleteTournament = async (id) => {
    if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä?")) return;
  
    try {
      const res = await fetch(`http://localhost:8080/tournaments/${id}`, {
        method: 'DELETE',
        headers: { Authorization: `Bearer ${token}` },
      });
  
      if (!res.ok) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä');
      fetchTournaments();
      alert('–¢—É—Ä–Ω–∏—Ä —É–¥–∞–ª–µ–Ω');
    } catch (err) {
      alert(err.message);
    }
  };
  

  useEffect(() => {
    fetchTournaments();
  }, []);

  return (
    <div className="admin-section">
      <h2>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏</h2>
      <button className="create-button" onClick={() => setShowModal(true)}>
        –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç—É—Ä–Ω–∏—Ä
      </button>

      <table className="admin-table">
        <thead>
          <tr>
            <th>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</th>
            <th>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</th>
            <th>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</th>
            <th>–°—Ç–∞—Ç—É—Å</th>
            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
          </tr>
        </thead>
        <tbody>
          {tournamentsLoading ? (
            <tr><td colSpan="4">–ó–∞–≥—Ä—É–∑–∫–∞...</td></tr>
          ) : tournaments.length === 0 ? (
            <tr><td colSpan="4">–ù–µ—Ç —Ç—É—Ä–Ω–∏—Ä–æ–≤</td></tr>
          ) : (
            tournaments.map((tournament) => (
              <tr key={tournament.id}>
                <td>{tournament.name}</td>
                <td>{new Date(tournament.start_time).toLocaleString()}</td>
                <td>{new Date(tournament.end_time).toLocaleString()}</td>
                <td>{tournament.status}</td>
                <td>
                  <div className="action-buttons">
                    {/* <button
                      className="action-button view"
                      title="–ü—Ä–æ—Å–º–æ—Ç—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
                      onClick={() => console.log('–£—á–∞—Å—Ç–Ω–∏–∫–∏ —Ç—É—Ä–Ω–∏—Ä–∞', tournament.id)}
                    >
                      üë•
                    </button> */}

                    <button
                      className="action-button start"
                      title="–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                      onClick={() => handleStartTournament(tournament.id)}
                    >
                      üü¢
                    </button>

                    <button
                      className="action-button finish"
                      title="–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                      onClick={() => handleFinishTournament(tournament.id)}
                    >
                      üî¥
                    </button>

                    <button
                      className="action-button delete"
                      title="–£–¥–∞–ª–∏—Ç—å —Ç—É—Ä–Ω–∏—Ä"
                      onClick={() => handleDeleteTournament(tournament.id)}
                    >
                      üóëÔ∏è
                    </button>
                  </div>
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {showModal && (
        <div className="modal-overlay">
          <div className="modal-content">
            <h3>–°–æ–∑–¥–∞–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞</h3>

            <div className="form-group">
              <label>–ù–∞–∑–≤–∞–Ω–∏–µ</label>
              <input
                type="text"
                value={formData.name}
                onChange={(e) => setFormData({ ...formData, name: e.target.value })}
              />
            </div>

            <div className="form-group">
              <label>–û–ø–∏—Å–∞–Ω–∏–µ</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
              />
            </div>

            <div className="form-group">
              <label>–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞</label>
              <input
                type="datetime-local"
                value={formData.start_time}
                onChange={(e) => setFormData({ ...formData, start_time: e.target.value })}
              />
            </div>

            <div className="form-group">
              <label>–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è</label>
              <input
                type="datetime-local"
                value={formData.end_time}
                onChange={(e) => setFormData({ ...formData, end_time: e.target.value })}
              />
            </div>

            <div className="modal-buttons">
              <button className="cancel-button" onClick={() => setShowModal(false)}>–û—Ç–º–µ–Ω–∞</button>
              <button className="submit-button" onClick={handleCreate}>–°–æ–∑–¥–∞—Ç—å</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TournamentManagement;
